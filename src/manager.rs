use anyhow::Result;
use tokio::fs;
use tokio::process::Command;

pub struct Manager {
    version: String,
}

impl Manager {
    pub fn new(version: String) -> Self {
        Manager { version }
    }

    pub async fn use_version(&self) -> Result<()> {
        println!("Using espressif {}", self.version);
        let idf_tools_path = format!("{}/espressif/{}/.espressif/", env!("HOME"), &self.version);
        let esp_idf_path = format!("{}/espressif/{}/esp-idf", env!("HOME"), &self.version);

        let script_path = format!("{}/.espv_env_{}.sh", env!("HOME"), &self.version);
        let script_content = format!(
            r#"#!/bin/bash
# ESP-IDF {} environment setup - Generated by espv
export IDF_TOOLS_PATH="{}"
export IDF_PATH="{}"

# Source the ESP-IDF export script to set up all tools and paths
if [ -f "$IDF_PATH/export.sh" ]; then
    source "$IDF_PATH/export.sh"
else
    echo "Warning: ESP-IDF export.sh not found at $IDF_PATH/export.sh"
fi

echo "ESP-IDF {} environment activated"
"#,
            self.version, idf_tools_path, esp_idf_path, self.version
        );

        fs::write(&script_path, script_content).await?;

        Command::new("chmod")
            .args(["+x", &script_path])
            .output()
            .await?;

        let wrapper_path = format!("{}/.espv_wrapper.sh", env!("HOME"));
        let wrapper_content = format!(
            r#"#!/bin/bash
# espv wrapper function - add this to your shell profile
espv_use() {{
    if [ "$1" ]; then
        source "$HOME/.espv_env_$1.sh"
    else
        echo "Usage: espv_use <version>"
    fi
}}
"#
        );

        fs::write(&wrapper_path, wrapper_content).await?;

        println!("Environment configured for ESP-IDF {}", self.version);
        println!("Add this to your ~/.zshrc or ~/.bashrc:");
        println!("source {}", wrapper_path);
        println!("Then use: espv_use {}", self.version);

        Ok(())
    }

    pub async fn uninstall(&self) -> Result<()> {
        fs::remove_dir_all(format!("{}/espressif/{}", env!("HOME"), &self.version)).await?;

        fs::remove_file(format!("{}/.espv_env_{}.sh", env!("HOME"), &self.version)).await?;

        Ok(())
    }
}
