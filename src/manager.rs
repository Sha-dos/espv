use tokio::process::Command;
use tokio::fs;

pub struct Manager {
    version: String,
}

impl Manager {
    pub fn new(version: String) -> Self {
        Manager { version }
    }

    pub async fn use_version(&self) -> anyhow::Result<()> {
        println!("Using espressif {}", self.version);
        let idf_tools_path = format!("{}/espressif/{}/.espressif/", env!("HOME"), &self.version);
        let esp_idf_path = format!("{}/espressif/{}/esp-idf", env!("HOME"), &self.version);
        
        let script_path = format!("{}/.espv_env_{}.sh", env!("HOME"), &self.version);
        let script_content = format!(r#"#!/bin/bash
# ESP-IDF {} environment setup - Generated by espv
export IDF_TOOLS_PATH="{}"
export IDF_PATH="{}"

# Source the ESP-IDF export script to set up all tools and paths
if [ -f "$IDF_PATH/export.sh" ]; then
    source "$IDF_PATH/export.sh"
else
    echo "Warning: ESP-IDF export.sh not found at $IDF_PATH/export.sh"
fi

echo "ESP-IDF {} environment activated"
"#, self.version, idf_tools_path, esp_idf_path, self.version);
        
        fs::write(&script_path, script_content).await?;
        
        Command::new("chmod")
            .args(["+x", &script_path])
            .output()
            .await?;
        
        println!("Created environment script: {}", script_path);
        
        Command::new("bash")
            .arg("-c")
            .arg(format!("source {}", script_path))
            .output()
            .await?;

        Ok(())
    }
}